# Different Not Less MCP Integration & CI/CD Rules

This document serves as the shared reference for Claude and Cline as co-developers of the Different Not Less project. Both AI assistants should adhere to these guidelines and reference each other's work to maintain consistency.

## Session Conclusion Workflow

### Memory Bank Updates
- Update activeContext.md with completed tasks and current status
- Update progress.md with latest achievements and metrics
- Document any new decisions in relevant knowledge files
- Create/update technical documentation for implemented features

### Task Management Process
- Mark completed tasks with [x] in activeContext.md
- Update GitHub Projects using appropriate MCP commands
- Prioritize next tasks with clear descriptions
- Add any discovered tasks to activeContext.md

### Code Management Rules
- Group related changes into focused commits
- Write descriptive commit messages with ticket numbers: `[DNL-123] Add feature X`
- Include test plans or verification methods in PR descriptions
- Document any technical debt created with clear explanations

### GitHub Integration Process
- Push to feature branches following naming convention: `feature/DNL-[number]-[description]`
- Create PRs with comprehensive descriptions including:
  - What changes were made
  - Why the changes were made
  - How to test the changes
  - Screenshots (if UI changes)
- Ensure CI checks pass before requesting review

### Session Documentation Format
- Session summary template:
  - Session date and duration
  - Key accomplishments
  - Challenges encountered
  - Decisions made
  - Next steps
- Store session summaries in memory-bank/sessions/ directory

## MCP Usage Patterns

### GitHub MCP Server
- Use GitHub MCP for automating code operations and CI/CD workflows
- Create issues for build failures using the `reportFailedBuild` function
- Auto-merge PRs that pass all checks using the `autoPRMerge` function
- Track deployment status using the `updateDeploymentStatus` function
- Create rollback PRs when needed using the `createRollbackPR` function

### Shopify MCP Server
- Use Shopify MCP for product management and e-commerce operations
- Sync product data between Shopify and the website
- Retrieve product collections for display on the website
- Get shop details for configuration and branding

### Airtable MCP Server
- Use Airtable MCP for inventory management
- Track inventory levels and sync with Shopify
- Manage product variants and attributes
- Store detailed product information
- Use Business Details and Shopify Store Setup tables for tracking setup tasks
- Follow the structure defined in airtable-shopify-setup.js

### Software Planning MCP
- Use for sprint planning and feature development
- Create planning sessions for new features
- Break down features into tasks with complexity scores
- Track implementation progress

## CI/CD Workflow Rules

### Branch Naming Conventions
- Feature branches: `feature/DNL-[number]-[description]`
- Bug fix branches: `fix/DNL-[number]-[description]`
- Hotfix branches: `hotfix/DNL-[number]-[description]`
- Release branches: `release/v[major].[minor].[patch]`
- Rollback branches: `rollback/[environment]-[timestamp]`

### Pull Request Guidelines
- PRs require at least one approval before merging
- All CI checks must pass before merging
- PR title should include ticket number: `[DNL-123] Add feature X`
- PR description should include:
  - What changes were made
  - Why the changes were made
  - How to test the changes
  - Screenshots (if UI changes)

### Deployment Rules
- Development branch deploys automatically to staging
- Main branch deploys automatically to production after approval
- Production deployments require manual approval
- All deployments are tagged with `[environment]-[timestamp]`
- Rollbacks should be performed via the rollback PR process

### Environment Variables
- Environment variables are stored as GitHub Secrets
- Required secrets:
  - SHOPIFY_ACCESS_TOKEN
  - MYSHOPIFY_DOMAIN
  - AIRTABLE_API_KEY
  - SANITY_PROJECT_ID
  - VERCEL_TOKEN
  - FAL_API_KEY
  - MAKE_API_KEY

### Testing Requirements
- Linting must pass for all code changes
- TypeScript type checking must pass
- Build must complete successfully
- Future: Unit tests must pass (to be implemented)
- Future: E2E tests must pass (to be implemented)

## Integration Checkpoints

### Pre-Deployment Checklist
- All CI checks pass
- PR has been reviewed and approved
- Environment variables are configured correctly
- Deployment preview has been tested

### Post-Deployment Verification
- Verify the website loads correctly
- Check critical user flows (product browsing, cart, checkout)
- Verify Shopify integration is working
- Verify Airtable inventory sync is working

## Monitoring & Alerts

### Deployment Notifications
- Successful deployments notify the team via Slack
- Failed deployments create GitHub issues and notify the team
- Rollbacks trigger high-priority alerts

### Performance Monitoring
- Monitor page load times after deployments
- Track error rates and user experience metrics
- Alert on significant performance degradation

## Emergency Procedures

### Rollback Process
1. Identify the issue and affected systems
2. Create a rollback PR using the `createRollbackPR` function
3. Get expedited approval for the rollback
4. Deploy the rollback
5. Document the incident and create follow-up tasks

### Critical Issues
- Security vulnerabilities should be addressed immediately
- Data integrity issues require immediate attention
- User-facing errors should be prioritized based on impact
